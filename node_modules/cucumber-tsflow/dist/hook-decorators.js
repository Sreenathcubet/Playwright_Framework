(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "./binding-registry", "./our-callsite", "./step-binding", "./tag-normalization"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.before = before;
    exports.after = after;
    exports.beforeAll = beforeAll;
    exports.afterAll = afterAll;
    exports.beforeStep = beforeStep;
    exports.afterStep = afterStep;
    const binding_registry_1 = require("./binding-registry");
    const our_callsite_1 = require("./our-callsite");
    const step_binding_1 = require("./step-binding");
    const tag_normalization_1 = require("./tag-normalization");
    function overloadedOption(tag) {
        if (tag === undefined || typeof tag === "string") {
            return { tag };
        }
        return tag;
    }
    function createHookDecorator(flag, tagOrOption) {
        const callsite = our_callsite_1.Callsite.capture(2);
        const { tag, timeout, ...hookOptions } = overloadedOption(tagOrOption);
        return (target, propertyKey, descriptor) => {
            const stepBinding = {
                stepPattern: "",
                bindingType: flag,
                targetPrototype: target,
                targetPropertyKey: propertyKey,
                argsLength: target[propertyKey].length,
                tag: (0, tag_normalization_1.normalizeTag)(tag),
                callsite: callsite,
                timeout: timeout,
                hookOptions: hookOptions,
            };
            binding_registry_1.BindingRegistry.instance.registerStepBinding(stepBinding);
            return descriptor;
        };
    }
    /**
     * A method decorator that marks the associated function as a 'Before Scenario' step. The function is
     * executed before each scenario.
     *
     * @param tagOrOption An optional tag or hook options object.
     */
    function before(tagOrOption) {
        return createHookDecorator(step_binding_1.StepBindingFlags.before, tagOrOption);
    }
    /**
     * A method decorator that marks the associated function as an 'After Scenario' step. The function is
     * executed after each scenario.
     *
     * @param tagOrOption An optional tag or hook options object.
     */
    function after(tagOrOption) {
        return createHookDecorator(step_binding_1.StepBindingFlags.after, tagOrOption);
    }
    /**
     * A method decorator that marks the associated function as a 'Before Scenario' step. The function is
     * executed before each scenario.
     *
     * @param options Optional hook options object.
     */
    function beforeAll(options) {
        return createHookDecorator(step_binding_1.StepBindingFlags.beforeAll, options);
    }
    /**
     * A method decorator that marks the associated function as an 'After Scenario' step. The function is
     * executed after each scenario.
     *
     * @param options Optional hook options object.
     */
    function afterAll(options) {
        return createHookDecorator(step_binding_1.StepBindingFlags.afterAll, options);
    }
    /**
     * A method decorator that marks the associated function as a 'Before Step' step. The function is
     * executed before each step.
     *
     * @param options Optional hook options object.
     */
    function beforeStep(options) {
        return createHookDecorator(step_binding_1.StepBindingFlags.beforeStep, options);
    }
    /**
     * A method decorator that marks the associated function as an 'After Step' step. The function is
     * executed after each step.
     *
     * @param options Optional hook options object.
     */
    function afterStep(options) {
        return createHookDecorator(step_binding_1.StepBindingFlags.afterStep, options);
    }
});
//# sourceMappingURL=hook-decorators.js.map